SYNOPSIS
       java -jar swmutsel.jar
           -name <run_name>
           -sequences <sequence_file_name>
           -tree <tree_file_name | tree_newick_string>
           -geneticcode <standard | vertebrate_mit | plastid>
           [-penalty mvn,<sigma> | dirichlet,<alpha>]
           [-kappa <kappa>]
           [-pi T,C,A,G]
           [-scaling branch_scaling_factor]
           [-fitness A,R,N,D,C,Q,E,G,H,I,L,K,M,F,P,S,T,W,Y,V]
           [-fix mutation|branches|all]
           [-threads <cpu_cores>]
           [-distributed -host <host>:<port> [-host <host>:<port>], ...]
           [-sites <site>|<site_range>]
           [-restart-opt <no_of_restarts> [-restart-int <n_iterations>]]
           [-clademodel clade_label,clade_label[,clade_label[,...]]]
           [-help]

OPTIONS
   Required
       -n, -name
              Specifies name for the run. Output files are prefixed with this name.
              Be careful! The program will overwrite files with the same name.
              // todo: Exit if files with same name exit
       
       -s, -sequences
              Coding sequences alignment file name in PHYLIP format. Spaces are
              not allowed in sequence names.
              // todo: Other MSA formats esp. FASTA
       
       -t, -tree
              Newick-formatted tree file name. The tree string can be supplied
              instead e.g. "-tree (A:0.1,(B:0.1,C:0.1));". Spaces are not allowed
              in the string.
       
       -gc, -geneticcode
              The genetic code for the coding-sequences:
       
              -gc standard       : The Standard Code
              -gc vertebrate_mit : The Vertbrate Mitochondrial Code
              -gc plastid        : The Bacterial, Archaeal and Plant Plastid Code
       
   Model Parameters
       -p, -penalty
              The penalty to use for the penalised likelihood method. If not
              supplied, the usual (unpenalised) maximum likelihood method is used.
              Valid options are:
       
              -p mvn,<s>       : Multivariate normal penalty with variance <s>^2

              -p dirichlet,<a> : Dirichlet-based penalty with shape <a>
       
       -k, -kappa
              The transition-transversion rate ratio for mutation.
              DEFAULT: 1.0
       
       -pi
              Comma-separated base frequencies in order T,C,A,G. The values are
              normalised to sum to 1.
              DEFAULT: [0.25]
       
       -c, -scaling
              Branch scaling factor (applied to all branches).
              DEFAULT: 1.0
       
       -f, -fitness
              Comma-separated fitness parameters in canonical amino acid order.
              It is recommended that you do not construct these by hand but
              rather use the output generated by the program itself.
              DEFAULT: [0]
              // todo: Need to make sure the right amino acid has fitness fixed
              // todo: to 0 when user provides fitness vector
       
   Optimisation
       -fix
              Indicate whether you want the program to skip estimation of
              mutational parameters, branch lengths, both or no optimisation at
              all.
       
              -fix mutation          : Fix the values (k, pi, c) of the mutational
                                       model.

              -fix branches          : Fix the branch lengths on the tree.

              -fix mutation,branches : Fix both mutational model parameters and
                                       branch lengths, and only estimate the
                                       fitness parameters.

              -fix all               : Calculate the log-likelihood only.
       
       -restart-opt
              Specifies the number of optimiser restarts for site-wise fitness
              parameter estimation. The is to prevent estimates being stuck at a
              local optima. The program will restart fitness estimation, with
              random initial values, the specified number of times.
              DEFAULT: 1
       
       -restart-int
              Specify how often to estimate fitness parameters with multiple
              restarts. Restarting the fitness parameter estimation is expensive
              and, in many cases, not necessary. The value supplied here defines
              how frequently to perform the robust fitness estimation, where a
              single round is one iteration of mutation, branch length and fitness
              estimation.
              DEFAULT: 5
       
       -sites
              Specify a single site, or a range of sites, for site-wise fitness
              estimation. If you provide this option, you implicitly fix the
              mutation and branch length parameters, "-fix mutation,branches".
              A range is specified using a dash e.g. "-sites 10-20" will estimate
              the site-wise fitnesses for all sites between site 10 and site 20,
              inclusive.
       
   Parallelisation
       -T, -threads
              Specify the number of cores to use for multi-threaded operation.
       
       -D, -distributed
              Indicate the program will run in distributed mode. This requires the
              initialisation of (usually) multiple slaves. Each slave will have
              an associated IP address (or hostname) and port (which you supply
              using "-H")
       
       -H, -host
              If the programming is running in distributed mode (using the "-D"
              option), supply slaves' host IP and port using "-H <slave_ip>:<port>"

USAGE

       Simplest example:

          java -jar swmutsel.jar -n test -s aln.phy -t aln.tree -gc standard

       Options can also be placed in file but each argument should be on a new
       line. For example:

          cat > test_options.txt
          -s
          aln.phy
          -t
          aln.tree
          -gc
          standard
          ^D

       Note each space in a typical command-line argument becomes a newline. You
       can now run the program using:

          java -jar swmutsel.jar @test_options.txt -n test

       During parameter optimisation, the program will write checkpoint files.
       You can restart the program from a saved checkpoint, for example:

          java -jar swmutsel.jar @test_CHKPNT_9.txt -n test_restart

